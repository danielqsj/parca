// @generated by protoc-gen-connect-web v0.2.0 with parameter "target=js+dts"
// @generated from file parca/metastore/v1alpha1/metastore.proto (package parca.metastore.v1alpha1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CreateLocationLinesRequest, CreateLocationLinesResponse, FunctionsRequest, FunctionsResponse, GetOrCreateFunctionsRequest, GetOrCreateFunctionsResponse, GetOrCreateLocationsRequest, GetOrCreateLocationsResponse, GetOrCreateMappingsRequest, GetOrCreateMappingsResponse, GetOrCreateStacktracesRequest, GetOrCreateStacktracesResponse, LocationsRequest, LocationsResponse, MappingsRequest, MappingsResponse, StacktracesRequest, StacktracesResponse, UnsymbolizedLocationsRequest, UnsymbolizedLocationsResponse} from "./metastore_pb";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * MetastoreService
 *
 * @generated from service parca.metastore.v1alpha1.MetastoreService
 */
export declare const MetastoreService: {
  readonly typeName: "parca.metastore.v1alpha1.MetastoreService",
  readonly methods: {
    /**
     * GetOrCreateMappings checks if the mappings in the request are already
     * known and returns the known mapping (including its ID) if so. If a mapping
     * does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateMappings
     */
    readonly getOrCreateMappings: {
      readonly name: "GetOrCreateMappings",
      readonly I: typeof GetOrCreateMappingsRequest,
      readonly O: typeof GetOrCreateMappingsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateFunctions checks if the functions in the request are already
     * known and returns the known function (including its ID) if so. If a
     * function does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateFunctions
     */
    readonly getOrCreateFunctions: {
      readonly name: "GetOrCreateFunctions",
      readonly I: typeof GetOrCreateFunctionsRequest,
      readonly O: typeof GetOrCreateFunctionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateLocations checks if the locations in the request are already
     * known and returns the known location (including its ID) if so. If a
     * location does not already exist, it is written to the backing metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateLocations
     */
    readonly getOrCreateLocations: {
      readonly name: "GetOrCreateLocations",
      readonly I: typeof GetOrCreateLocationsRequest,
      readonly O: typeof GetOrCreateLocationsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetOrCreateStacktraces checks if the stacktraces in the request are
     * already known and returns the known stacktrace (including its ID) if so.
     * If a stacktrace does not already exist, it is written to the backing
     * metastore.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.GetOrCreateStacktraces
     */
    readonly getOrCreateStacktraces: {
      readonly name: "GetOrCreateStacktraces",
      readonly I: typeof GetOrCreateStacktracesRequest,
      readonly O: typeof GetOrCreateStacktracesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * UnsymbolizedLocations returns locations that can be symbolized but haven't
     * been asynchronously symbolized yet.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.UnsymbolizedLocations
     */
    readonly unsymbolizedLocations: {
      readonly name: "UnsymbolizedLocations",
      readonly I: typeof UnsymbolizedLocationsRequest,
      readonly O: typeof UnsymbolizedLocationsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * CreateLocationLines creates the location lines contained in the provided
     * locations.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.CreateLocationLines
     */
    readonly createLocationLines: {
      readonly name: "CreateLocationLines",
      readonly I: typeof CreateLocationLinesRequest,
      readonly O: typeof CreateLocationLinesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Locations retrieves locations.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Locations
     */
    readonly locations: {
      readonly name: "Locations",
      readonly I: typeof LocationsRequest,
      readonly O: typeof LocationsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Functions retrieves functions.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Functions
     */
    readonly functions: {
      readonly name: "Functions",
      readonly I: typeof FunctionsRequest,
      readonly O: typeof FunctionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Mappings retrieves mappings.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Mappings
     */
    readonly mappings: {
      readonly name: "Mappings",
      readonly I: typeof MappingsRequest,
      readonly O: typeof MappingsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Stacktraces retrieves mappings.
     *
     * @generated from rpc parca.metastore.v1alpha1.MetastoreService.Stacktraces
     */
    readonly stacktraces: {
      readonly name: "Stacktraces",
      readonly I: typeof StacktracesRequest,
      readonly O: typeof StacktracesResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

