// @generated by protoc-gen-es v0.1.0 with parameter "target=ts"
// @generated from file parca/debuginfo/v1alpha1/debuginfo.proto (package parca.debuginfo.v1alpha1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * ExistsRequest request to determine if debug info exists for a given build_id
 *
 * @generated from message parca.debuginfo.v1alpha1.ExistsRequest
 */
export class ExistsRequest extends Message<ExistsRequest> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * hash is the hash of the debug information file
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  constructor(data?: PartialMessage<ExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.ExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistsRequest {
    return new ExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistsRequest {
    return new ExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistsRequest {
    return new ExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExistsRequest | PlainMessage<ExistsRequest> | undefined, b: ExistsRequest | PlainMessage<ExistsRequest> | undefined): boolean {
    return proto3.util.equals(ExistsRequest, a, b);
  }
}

/**
 * ExistsResponse returns whether the given build_id has debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.ExistsResponse
 */
export class ExistsResponse extends Message<ExistsResponse> {
  /**
   * exists indicates if there is debug data present for the given build_id
   *
   * @generated from field: bool exists = 1;
   */
  exists = false;

  constructor(data?: PartialMessage<ExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.ExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExistsResponse {
    return new ExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExistsResponse {
    return new ExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExistsResponse {
    return new ExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExistsResponse | PlainMessage<ExistsResponse> | undefined, b: ExistsResponse | PlainMessage<ExistsResponse> | undefined): boolean {
    return proto3.util.equals(ExistsResponse, a, b);
  }
}

/**
 * UploadRequest upload debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadRequest
 */
export class UploadRequest extends Message<UploadRequest> {
  /**
   * data contains either the upload info metadata or the debug info
   *
   * @generated from oneof parca.debuginfo.v1alpha1.UploadRequest.data
   */
  data: {
    /**
     * info is the metadata for the debug info
     *
     * @generated from field: parca.debuginfo.v1alpha1.UploadInfo info = 1;
     */
    value: UploadInfo;
    case: "info";
  } | {
    /**
     * chunk_data is the raw bytes of the debug info
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<UploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: UploadInfo, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRequest {
    return new UploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRequest | PlainMessage<UploadRequest> | undefined, b: UploadRequest | PlainMessage<UploadRequest> | undefined): boolean {
    return proto3.util.equals(UploadRequest, a, b);
  }
}

/**
 * UploadInfo contains the build_id and other metadata for the debug data
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadInfo
 */
export class UploadInfo extends Message<UploadInfo> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * hash is the hash of the source file that debug information extracted from
   *
   * @generated from field: string hash = 2;
   */
  hash = "";

  constructor(data?: PartialMessage<UploadInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadInfo {
    return new UploadInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadInfo {
    return new UploadInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadInfo {
    return new UploadInfo().fromJsonString(jsonString, options);
  }

  static equals(a: UploadInfo | PlainMessage<UploadInfo> | undefined, b: UploadInfo | PlainMessage<UploadInfo> | undefined): boolean {
    return proto3.util.equals(UploadInfo, a, b);
  }
}

/**
 * UploadResponse returns the build_id and the size of the uploaded debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  /**
   * size is the number of bytes of the debug info
   *
   * @generated from field: uint64 size = 2;
   */
  size = protoInt64.zero;

  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

/**
 * DownloadRequest upload debug info
 *
 * @generated from message parca.debuginfo.v1alpha1.DownloadRequest
 */
export class DownloadRequest extends Message<DownloadRequest> {
  /**
   * build_id is a unique identifier for the debug data
   *
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<DownloadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.DownloadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadRequest {
    return new DownloadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadRequest | PlainMessage<DownloadRequest> | undefined, b: DownloadRequest | PlainMessage<DownloadRequest> | undefined): boolean {
    return proto3.util.equals(DownloadRequest, a, b);
  }
}

/**
 * DownloadRequest returns chunked data of the debuginfo.
 *
 * @generated from message parca.debuginfo.v1alpha1.DownloadResponse
 */
export class DownloadResponse extends Message<DownloadResponse> {
  /**
   * data contains either the upload info metadata or the debug info
   *
   * @generated from oneof parca.debuginfo.v1alpha1.DownloadResponse.data
   */
  data: {
    /**
     * info is the metadata for the debug info
     *
     * @generated from field: parca.debuginfo.v1alpha1.DownloadInfo info = 1;
     */
    value: DownloadInfo;
    case: "info";
  } | {
    /**
     * chunk_data is the raw bytes of the debug info
     *
     * @generated from field: bytes chunk_data = 2;
     */
    value: Uint8Array;
    case: "chunkData";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DownloadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.DownloadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: DownloadInfo, oneof: "data" },
    { no: 2, name: "chunk_data", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadResponse {
    return new DownloadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadResponse | PlainMessage<DownloadResponse> | undefined, b: DownloadResponse | PlainMessage<DownloadResponse> | undefined): boolean {
    return proto3.util.equals(DownloadResponse, a, b);
  }
}

/**
 * DownloadInfo metadata for the debug data that is being downloaded.
 *
 * @generated from message parca.debuginfo.v1alpha1.DownloadInfo
 */
export class DownloadInfo extends Message<DownloadInfo> {
  /**
   * Source indicates the origin of the debuginfo being downloaded.
   *
   * @generated from field: parca.debuginfo.v1alpha1.DownloadInfo.Source source = 1;
   */
  source = DownloadInfo_Source.UNKNOWN_UNSPECIFIED;

  constructor(data?: PartialMessage<DownloadInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "parca.debuginfo.v1alpha1.DownloadInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source", kind: "enum", T: proto3.getEnumType(DownloadInfo_Source) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadInfo {
    return new DownloadInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadInfo {
    return new DownloadInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadInfo {
    return new DownloadInfo().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadInfo | PlainMessage<DownloadInfo> | undefined, b: DownloadInfo | PlainMessage<DownloadInfo> | undefined): boolean {
    return proto3.util.equals(DownloadInfo, a, b);
  }
}

/**
 * Source enum describes the source a debuginfo is from.
 *
 * @generated from enum parca.debuginfo.v1alpha1.DownloadInfo.Source
 */
export enum DownloadInfo_Source {
  /**
   * To understand when no source is set we have the unknown source.
   *
   * @generated from enum value: SOURCE_UNKNOWN_UNSPECIFIED = 0;
   */
  UNKNOWN_UNSPECIFIED = 0,

  /**
   * The debuginfo was uploaded by a user/agent.
   *
   * @generated from enum value: SOURCE_UPLOAD = 1;
   */
  UPLOAD = 1,

  /**
   * The debuginfo was downloaded from a public debuginfod server.
   *
   * @generated from enum value: SOURCE_DEBUGINFOD = 2;
   */
  DEBUGINFOD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(DownloadInfo_Source)
proto3.util.setEnumType(DownloadInfo_Source, "parca.debuginfo.v1alpha1.DownloadInfo.Source", [
  { no: 0, name: "SOURCE_UNKNOWN_UNSPECIFIED" },
  { no: 1, name: "SOURCE_UPLOAD" },
  { no: 2, name: "SOURCE_DEBUGINFOD" },
]);

