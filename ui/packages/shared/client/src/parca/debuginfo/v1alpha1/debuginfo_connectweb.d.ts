// @generated by protoc-gen-connect-web v0.2.0 with parameter "target=js+dts"
// @generated from file parca/debuginfo/v1alpha1/debuginfo.proto (package parca.debuginfo.v1alpha1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {DownloadRequest, DownloadResponse, ExistsRequest, ExistsResponse, UploadRequest, UploadResponse} from "./debuginfo_pb";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * DebugInfoService is a service that allows storage of debug info
 *
 * @generated from service parca.debuginfo.v1alpha1.DebugInfoService
 */
export declare const DebugInfoService: {
  readonly typeName: "parca.debuginfo.v1alpha1.DebugInfoService",
  readonly methods: {
    /**
     * Exists returns true if the given build_id has debug info uploaded for it.
     *
     * @generated from rpc parca.debuginfo.v1alpha1.DebugInfoService.Exists
     */
    readonly exists: {
      readonly name: "Exists",
      readonly I: typeof ExistsRequest,
      readonly O: typeof ExistsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Upload ingests debug info for a given build_id
     *
     * @generated from rpc parca.debuginfo.v1alpha1.DebugInfoService.Upload
     */
    readonly upload: {
      readonly name: "Upload",
      readonly I: typeof UploadRequest,
      readonly O: typeof UploadResponse,
      readonly kind: MethodKind.ClientStreaming,
    },
    /**
     * Download returns the debug info for a given build_id.
     *
     * @generated from rpc parca.debuginfo.v1alpha1.DebugInfoService.Download
     */
    readonly download: {
      readonly name: "Download",
      readonly I: typeof DownloadRequest,
      readonly O: typeof DownloadResponse,
      readonly kind: MethodKind.ServerStreaming,
    },
  }
};

